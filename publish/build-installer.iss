; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "vicon"
;#define MyAppVersion "0.0.0" ; Use CLI argument, i.i. ISCC /DMyAppVersion="0.0.0"
#define MyAppPublisher "Jon Carrier"
#define MyAppURL "https://github.com/jjcarrier/vicon"
#define MyAppExeName "vicon-x64.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{07E50532-31B9-4E6D-8B45-7F9618A55E4E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
CreateAppDir=yes
LicenseFile=..\LICENSE
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=artifacts
OutputBaseFilename=setup-vicon-v{#MyAppVersion}-win-x64
SolidCompression=yes
WizardStyle=modern
DefaultDirName={autopf}\jjcarrier\vicon
ArchitecturesAllowed=x64compatible
ArchitecturesInstallIn64BitMode=x64compatible

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "build\win-x64\HidSharp.dll"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\PowerSupply.dll"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\Spectre.Console.Cli.dll"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\Spectre.Console.dll"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\vicon.dll"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\vicon.exe"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "build\win-x64\vicon.runtimeconfig.json"; DestDir: "{app}\bin"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
///////////////////////////////////
// Check if bin path exists in HKLM
///////////////////////////////////
function NeedsAddPathHKLM(Param: string): boolean;
var
OrigPath: string;
begin
if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
'Path', OrigPath)
then begin
Result := True;
exit;
end;
// look for the path with leading and trailing semicolon
// Pos() returns 0 if not found
Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;

///////////////////////////////////
// Check if bin path exists in HKCU
///////////////////////////////////
function NeedsAddPathHKCU(Param: string): boolean;
var
OrigPath: string;
begin
if not RegQueryStringValue(HKEY_CURRENT_USER,
'Environment',
'Path', OrigPath)
then begin
Result := True;
exit;
end;
// look for the path with leading and trailing semicolon
// Pos() returns 0 if not found
Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;

///////////////////
// Check for .NET 8
///////////////////
function IsDotNetInstalled(DotNetName: string): Boolean;
var
  Cmd, Args: string;
  FileName: string;
  Output: AnsiString;
  Command: string;
  ResultCode: Integer;
begin
  FileName := ExpandConstant('{tmp}\dotnet.txt');
  Cmd := ExpandConstant('{cmd}');
  Command := 'dotnet --list-runtimes';
  Args := '/C ' + Command + ' > "' + FileName + '" 2>&1';
  if Exec(Cmd, Args, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) and
     (ResultCode = 0) then
  begin
    if LoadStringFromFile(FileName, Output) then
    begin
      if Pos(DotNetName, Output) > 0 then
      begin
        Log('"' + DotNetName + '" found in output of "' + Command + '"');
        Result := True;
      end
      else
      begin
        Log('"' + DotNetName + '" not found in output of "' + Command + '"');
        Result := False;
      end;
    end
    else
    begin
      Log('Failed to read output of "' + Command + '"');
    end;
  end
  else
  begin
    Log('Failed to execute "' + Command + '"');
    Result := False;
  end;
  DeleteFile(FileName);
end;

function InitializeSetup(): Boolean;
begin
  if not IsDotNetInstalled('Microsoft.NETCore.App 8.0.') then
  begin
    MsgBox('Please install the .NET 8 Runtime to run this application.', mbError, MB_OK);
    Result := False;
  end
  else
  begin
    Result := True;
  end;

end;

[Registry]
Root: "HKLM"; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\bin"; Check: NeedsAddPathHKLM(ExpandConstant('{app}\bin'))
Root: "HKCU"; Subkey: "Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\bin"; Check: NeedsAddPathHKCU(ExpandConstant('{app}\bin'))
